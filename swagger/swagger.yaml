openapi: 3.0.0
info:
  title: SANSA Water Quality and Quantity
  description: API for providing analytics and forecasting tools for possible and rate of the spread of eutrophication
  version: 1.0.0
servers:
  - url: http://localhost:8200/v1
    description: Local development server (v1)

tags:
  - name: Datasets
    description: Endpoints for returning overviews of stored data
  - name: Water Surface Analysis
    description: Endpoints for water surface area and altimeter estimation
  - name: Water Quality
    description: Endpoints for water pollution, eutrophication, and turbidity
  - name: Index Calculations
    description:  Endpoints for Normalised Difference Chlorophyll Index (NDCI)

paths:
  /api/datasets:
    get:
      summary: Get Overview of All Data Crawled
      description: Returns paginated data categorized by dataset type with filters for querying specific information.
      operationId: getDatasets
      security:
        - bearerAuth: [ ]
      tags:
        - Datasets
      parameters:
        - name: library
          in: query
          description: Filter by dataset category (e.g., AWEI, NDTI, NDCI, SABI, Coloured Dissolved Organic Matter)
          schema:
            type: string
          example: AWEI
        - name: dataset
          in: query
          description: Filter if dataset is Landsat or Sentinel.
          schema:
            type: string
          example: Landsat
        - name: format
          in: query
          description: Filter by output format (e.g., TIFF, Shapefile, RASTER)
          schema:
            type: string
          example: TIFF
        - name: summary
          in: query
          description: If set to true, returns summary statistics instead of raw data.
          schema:
            type: boolean
          example: true
        - name: bbox
          in: query
          description: Bounding box coordinates (minLon, minLat, maxLon, maxLat).
          explode: false
          schema:
            type: array
            items:
              type: number
            minItems: 4
            maxItems: 4
          example: [ 102.0, 0.5, 103.0, 1.5 ]
        - name: page
          in: query
          description: Page number for paginated results.
          schema:
            type: integer
            default: 1
          example: 1
        - name: page_size
          in: query
          description: Number of items per page.
          schema:
            type: integer
            default: 10
          example: 10
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              example:
                status: success
                data:
                  datasets:
                    - id: 1
                      category: AWEI
                      source: Landsat
                      resolution: "30m"
                      output_format: TIFF
                      download_url: https://example.com/uploads/image.tiff
                      date_crawled: "2025-02-05"
                      bbox: [ [ 102.0, 0.5 ], [ 103.0, 1.5 ] ]
                pagination:
                  current_page: 1
                  page_size: 10
                  total_pages: 5
                  total_entries: 50
                summary:
                  total_entries: 50
                  categories: [ "AWEI", "NDTI" ]
                  unique_sources: [ "Landsat", "Sentinel" ]
                  resolutions: [ "10m", "100m", "300m" ]
                  formats: [ "TIFF", "RASTER", "Shapefile" ]
        "400":
          description: Bad request due to invalid filter parameter
          content:
            application/json:
              example:
                status: error
                message: "Invalid filter parameter"
        "401":
          description: Unauthorized request due to missing or invalid authentication token
          content:
            application/json:
              example:
                status: error
                message: "Missing or invalid authentication token"
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                status: error
                message: "An unexpected error occurred on the server"

  /api/dataset/{dataset_id}:
    get:
      summary: Get Dataset by ID
      description: Retrieves detailed information about a specific dataset using its unique ID, including additional metadata and processing details.
      operationId: getDatasetById
      security:
        - bearerAuth: []
      tags:
        - Datasets
      parameters:
        - name: dataset_id
          in: path
          required: true
          description: Unique identifier of the dataset.
          schema:
            type: integer
          example: 1
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              example:
                status: success
                data:
                  id: 1
                  category: AWEI
                  source: Landsat/Sentinel
                  resolution: 10m to 300m
                  output_format: TIFF
                  download_url: https://example.com/uploads/image.tiff
                  date_crawled: "2025-02-05"
                  bbox: [[102.0, 0.5], [102.0, 0.5], [102.0, 0.5], [102.0, 0.5]]
                  metadata:
                    processed_by: "Automated Pipeline"
                    processing_date: "2025-02-06"
                    quality: "High"
                    notes: "Cloud-free imagery with minimal artifacts"
        "400":
          description: Bad request due to invalid dataset ID
          content:
            application/json:
              example:
                status: error
                message: "Invalid dataset ID"
        "401":
          description: Unauthorized request due to missing or invalid authentication token
          content:
            application/json:
              example:
                status: error
                message: "Missing or invalid authentication token"
        "404":
          description: Dataset not found
          content:
            application/json:
              example:
                status: error
                message: "Dataset not found"
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                status: error
                message: "An unexpected error occurred on the server"

  /api/awei-water-extent:
    post:
      summary: Compute Water Surface Area Extent
      description: |
        Starts an asynchronous task to compute the water surface area extent using the Automated Water Extraction Index (AWEI).
      operationId: computeWaterExtent
      security:
        - bearerAuth: [ ]
      tags:
        - Water Surface Analysis
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - spatial_resolution
                - start_date
                - end_date
                - bbox
                - input_type
              properties:
                spatial_resolution:
                  type: integer
                  description: Spatial resolution of the output (in meters).
                  example: 30
                start_date:
                  type: string
                  format: date
                  description: Start date of the analysis (YYYY-MM-DD).
                  example: "2024-01-01"
                end_date:
                  type: string
                  format: date
                  description: End date of the analysis (YYYY-MM-DD).
                  example: "2024-12-31"
                bbox:
                  type: array
                  description: Bounding box coordinates (minLon, minLat, maxLon, maxLat).
                  minItems: 4
                  maxItems: 4
                  items:
                    type: number
                  example: [102.0, 0.5, 103.0, 1.5]
                input_type:
                  type: string
                  description: Type of input dataset (Landsat or Sentinel).
                  enum:
                    - Landsat
                    - Sentinel
                  example: "Landsat"
      responses:
        "202":
          description: Task has been started successfully.
          content:
            application/json:
              example:
                status: "pending"
                task_uuid: "550e8400-e29b-41d4-a716-446655440000"
        "400":
          description: Invalid request parameters.
          content:
            application/json:
              example:
                status: "error"
                message: "Invalid bounding box format."
        "401":
          description: Unauthorized request due to missing or invalid authentication token.
          content:
            application/json:
              example:
                status: "error"
                message: "Missing or invalid authentication token."
        "500":
          description: Internal Server Error.
          content:
            application/json:
              example:
                status: "error"
                message: "An unexpected error occurred on the server."

  /api/awei-water-extent/{task_uuid}/:
    get:
      summary: Check Status of Water Extent Calculation
      description: |
        Checks the status of a running Celery task that is computing water surface area extent.
      operationId: checkWaterExtentStatus
      security:
        - bearerAuth: []
      tags:
        - Water Surface Analysis
      parameters:
        - name: task_uuid
          in: path
          required: true
          description: Unique task ID of the water extent computation.
          schema:
            type: string
          example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        "200":
          description: Task completed successfully.
          content:
            application/json:
              example:
                status: "completed"
                data:
                  area_km2: 150.2
                  days_observed: 365
                  input_type: "Landsat"
        "202":
          description: Task is still processing.
          content:
            application/json:
              example:
                status: "pending"
        "500":
          description: Task failed due to an internal error.
          content:
            application/json:
              example:
                status: "failed"
                message: "An unexpected error occurred."

  /api/ndti:
    get:
      summary: Get Normalized Difference Turbidity Index (NDTI) Data
      description: Returns a raster for NDTI along with necessary data calculated for water pollution, sedimentation in rivers, lakes, and dams.
      operationId: getNDTI
      security:
        - bearerAuth: []
      tags:
        - Water Quality
      parameters:
        - name: spatial_resolution
          in: query
          description: Filter by spatial resolution.
          schema:
            type: integer
          example: 30
        - name: start_date
          in: query
          description: Filter by dataset start date.
          schema:
            type: string
            format: date
          example: "2024-01-01"
        - name: end_date
          in: query
          description: Filter by dataset end date.
          schema:
            type: string
            format: date
          example: "2024-12-31"
        - name: bbox
          in: query
          description: Bounding box coordinates (minLon, minLat, maxLon, maxLat).
          required: true
          explode: false
          schema:
            type: array
            items:
              type: number
            minItems: 4
            maxItems: 4
          example: [ 102.0, 0.5, 103.0, 1.5 ]
        - name: input_type
          in: query
          description: Filter by Landsat or Sentinel.
          required: true
          schema:
            type: string
          example: "Landsat"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              example:
                status: success
                data:
                  download_url: https://example.com/ndti/mask.tif
                  possible_point_pollution:
                    sources: ["Industrial Waste", "Agricultural Runoff"]
                    coordinates: [[100.5, 0.5], [101.2, 1.2]]
                  possible_non-point_pollution:
                    sources: ["Urban Runoff", "Erosion"]
                    affected_area: "5 km2"
                  water_pollution:
                    turbidity_level: "High"
                    pollutants_detected: ["Nitrates", "Phosphates"]
                  sediment:
                    sediment_concentration: "Moderate"
                    affected_water_bodies: ["River A", "Lake B"]
        "400":
          description: Bad request due to invalid parameters
          content:
            application/json:
              example:
                status: error
                message: "Invalid bounding box"
        "401":
          description: Unauthorized request due to missing or invalid authentication token
          content:
            application/json:
              example:
                status: error
                message: "Missing or invalid authentication token"
        "405":
          description: Method not allowed
          content:
            application/json:
              example:
                status: error
                message: "Method Not Allowed"
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                status: error
                message: "An unexpected error occurred on the server"

  /api/ndci:
    get:
      summary: Get Normalized Difference Chlorophyll Index (NDCI)
      description: |
        This endpoint returns a raster for NDCI and necessary data calculated for water pollution, 
        sedimentation in rivers, lakes, and dams.
      operationId: getNDCI
      security:
        - bearerAuth: []
      tags:
        - Index Calculations
      parameters:
        - name: spatial_resolution
          in: query
          description: Filter by spatial resolution.
          schema:
            type: integer
          example: 30
        - name: start_date
          in: query
          description: Filter by dataset start date.
          schema:
            type: string
            format: date
          example: "2024-01-01"
        - name: end_date
          in: query
          description: Filter by dataset end date.
          schema:
            type: string
            format: date
          example: "2024-12-31"
        - name: bbox
          in: query
          description: Bounding box coordinates (minLon, minLat, maxLon, maxLat).
          required: true
          explode: false
          schema:
            type: array
            items:
              type: number
            minItems: 4
            maxItems: 4
          example: [ 102.0, 0.5, 103.0, 1.5 ]
        - name: input_type
          in: query
          description: Filter by Landsat or Sentinel.
          schema:
            type: string
          example: "Landsat"
        - name: air_temperature
          in: query
          description: Add the air temperature for the atmospheric model.
          schema:
            type: number
          example: 25.5
        - name: relative_humidity
          in: query
          description: Add the humidity for the atmospheric model.
          schema:
            type: number
          example: 65.0
        - name: wind_speed
          in: query
          description: Add the wind speed for the atmospheric model.
          schema:
            type: number
          example: 5.5
        - name: precipitation
          in: query
          description: Add the precipitation for the atmospheric model.
          schema:
            type: number
          example: 12.3
        - name: solar_radiation
          in: query
          description: Add the solar radiation for the atmospheric model.
          schema:
            type: number
          example: 850.0
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              example:
                status: success
                data:
                  download_url: "https://example.com/ndci/mask.tif"
                  chlorophyll_index: 0.32
                  possible_point_pollution:
                    industrial_discharge: "Detected near site X"
                    wastewater_treatment: "Moderate contamination"
                  possible_non-point_pollution:
                    agricultural_runoff: "High nitrate levels detected"
                    urban_stormwater: "Trace pollution identified"
                  water_pollution:
                    chlorophyll_a: "Elevated levels detected"
                    turbidity: "Moderate"
                  sediment:
                    sediment_load: "High during rainy season"
                    source: "Erosion from upstream"
        "400":
          description: Bad request due to invalid filter parameter
          content:
            application/json:
              example:
                status: error
                message: "Invalid bounding box"
        "401":
          description: Unauthorized request due to missing or invalid authentication token
          content:
            application/json:
              example:
                status: error
                message: "Missing or invalid authentication token"
        "405":
          description: Method Not Allowed
          content:
            application/json:
              example:
                status: error
                message: "Method Not Allowed"
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                status: error
                message: "An unexpected error occurred on the server"

  /api/water-analysis/:
    post:
      summary: Trigger analysis for eutrophication indicators
      description: Starts an analysis of AWEI, NCDI, NDTI, SABI, and CDOM.
      operationId: triggerAnalysis
      tags:
        - Water Analysis Jobs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                spatial_resolution:
                  type: integer
                  description: Spatial resolution of the output mask (in meters).
                  example: 20
                start_date:
                  type: string
                  format: date
                  description: Start date of imagery dataset (YYYY-MM-DD).
                  example: "2024-01-01"
                end_date:
                  type: string
                  format: date
                  description: End date of imagery dataset (YYYY-MM-DD).
                  example: "2024-12-31"
                bbox:
                  type: array
                  description: Bounding box coordinates (minLon, minLat, maxLon, maxLat).
                  minItems: 4
                  maxItems: 4
                  items:
                    type: number
                  example: [102.0, 0.5, 103.0, 1.5]
                calc_types:
                  type: list
                  description: Calculation/analysis types.
                  items:
                    type: string
                  example: ["AWEI", "NDCI", "NDTI", "SABI", "CDOM"]
                export_plot:
                  type: boolean
                  description: Export result as PNG plot.
                  example: true
                export_nc:
                  type: boolean
                  description: Export result as NetCDF.
                  example: true
                export_cog:
                  type: boolean
                  description: Export result as COG.
                  example: true
                # We currently only support Sentinel. Separate ticket will be made to support Landsat
                # input_type:
                #   type: string
                #   description: Imagery dataset type (Landsat or Sentinel).
                #   enum:
                #     - Landsat
                #     - Sentinel
                #   example: "Landsat"
      responses:
        "202":
          description: Job started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  task_uuid:
                    type: string
                    example: "550e8400-e29b-41d4-a716-446655440000"
        "400":
          description: Bad request due to invalid parameters.
          content:
            application/json:
              example:
                status: error
                message: "Invalid bounding box coordinates."
        "401":
          description: Unauthorized request due to missing or invalid authentication token
          content:
            application/json:
              example:
                status: error
                message: "Missing or invalid authentication token"
        "405":
          description: Method Not Allowed
          content:
            application/json:
              example:
                status: error
                message: "Method Not Allowed"
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                status: error
                message: "An unexpected error occurred on the server"

  /api/water-analysis/{task_uuid}/:
    get:
      summary: Check the status of the analysis
      description: Retrieves the current status of the analysis job and returns the processed data when finished.
      operationId: checkStatus
      tags:
        - Water Analysis Jobs
      parameters:
        - name: worker_id
          in: path
          required: true
          schema:
            type: string
      responses:
        "202":
          description: Job status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: ["pending", "processing", "completed", "failed"]
                    example: "processing"
                  results:
                    type: object
                    nullable: true
                    example: null
        "200":
          description: Analysis completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "completed"
                  results:
                    type: object
                    properties:
                      properties:
                        uuid:
                          type: string
                          format: uuid
                          example: "9e2ae848-f02e-453c-9e10-b59046c44161"
                        task_name:
                          type: string
                          example: "Water Analysis admin"
                        status:
                          type: string
                          enum: ["pending", "running", "completed", "failed"]
                          example: "completed"
                        parameters:
                          type: object
                          properties:
                            bbox:
                              type: array
                              items:
                                type: number
                                format: float
                              example: [19.071814670776433, -34.10465768253897, 19.32407544986191, -33.954845668837194]
                            start_date:
                              type: string
                              format: date
                              example: "2025-01-01"
                            end_date:
                              type: string
                              format: date
                              example: "2025-01-31"
                            calc_types:
                              type: array
                              items:
                                type: string
                              example: ["SABI"]
                            resolution:
                              type: integer
                              example: 20
                            export_nc:
                              type: boolean
                              example: false
                            export_cog:
                              type: boolean
                              example: true
                            export_plot:
                              type: boolean
                              example: false
                        started_at:
                          type: string
                          format: date-time
                          example: "2025-03-20T03:08:39.405125Z"
                        completed_at:
                          type: string
                          format: date-time
                          example: "2025-03-20T03:10:40.422969Z"
                        created_at:
                          type: string
                          format: date-time
                          example: "2025-03-20T03:08:39.362131Z"
                        task_outputs:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                                example: 21
                              file:
                                type: string
                                format: uri
                                example: "http://0.0.0.0:8000/media/2/9e2ae848-f02e-453c-9e10-b59046c44161/SABI_2025_01.tif"
                              size:
                                type: integer
                                example: 4461618
                              monitoring_type:
                                type: integer
                                example: 4
                              created_at:
                                type: string
                                format: date-time
                                example: "2025-03-20T03:10:40.415636Z"
                      # bloom_growth_rate:
                      #   type: number
                      #   example: 1.5
                      # spread_direction:
                      #   type: string
                      #   example: "North-East"
                      # total_coverage_days:
                      #   type: integer
                      #   example: 50
                      # density_flags:
                      #   type: array
                      #   items:
                      #     type: string
                      #   example: ["High", "Moderate", "Low"]
        "404":
          description: Worker ID not found
          content:
            application/json:
              example:
                status: error
                message: "Worker ID not found"
        "401":
          description: Unauthorized request due to missing or invalid authentication token
          content:
            application/json:
              example:
                status: error
                message: "Missing or invalid authentication token"
        "405":
          description: Method Not Allowed
          content:
            application/json:
              example:
                status: error
                message: "Method Not Allowed"
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                status: error
                message: "An unexpected error occurred on the server"

  /api/task-outputs:
    get:
      summary: List the outputs from the analysis
      description: Returns paginated task output filters for querying specific information.
      operationId: getTaskOutputs
      security:
        - bearerAuth: [ ]
      tags:
        - Datasets
      parameters:
        - name: monitoring_type__name
          in: query
          description: Filter by task output monitoring type (e.g., AWEI, NDTI, NDCI, SABI, CDOM).
          schema:
            type: string
          example: AWEI
        - name: from_date
          in: query
          description: Filter by starting date.
          schema:
            type: string
          example: "2025-03-01"
        - name: to_date
          in: query
          description: Filter by end date.
          schema:
            type: string
          example: "2025-03-31"
        - name: bbox
          in: query
          description: Bounding box coordinates (minLon, minLat, maxLon, maxLat).
          schema:
            type: string
          example: "102.0,0.5,103.0,1.5"
        - name: page
          in: query
          description: Page number for paginated results.
          schema:
            type: integer
            default: 1
          example: 1
        - name: page_size
          in: query
          description: Number of items per page.
          schema:
            type: integer
            default: 10
          example: 10
      responses:
        "200":
          description: Successful response with task outputs.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 1
                  next:
                    type: string
                    format: uri
                    nullable: true
                    example: null
                  previous:
                    type: string
                    format: uri
                    nullable: true
                    example: null
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 389
                        file:
                          type: string
                          format: uri
                          example: "http://0.0.0.0:8000/media/2/138e8bb7-3086-4c61-8503-5bfd8327c2d2/1_AWEI_2025_03.tif"
                        size:
                          type: integer
                          description: File size in kilobytes
                          example: 2466
                        monitoring_type:
                          type: string
                          example: "AWEI"
                        created_at:
                          type: string
                          format: date-time
                          example: "2025-04-08T07:29:26.736624Z"
                        observation_date:
                          type: string
                          format: date
                          example: "2025-03-01"
                        period:
                          type: string
                          description: Frequency of the analysis
                          example: "monthly"
        "400":
          description: Bad request due to invalid filter parameter
          content:
            application/json:
              example:
                status: error
                message: "Invalid filter parameter"
        "401":
          description: Unauthorized request due to missing or invalid authentication token
          content:
            application/json:
              example:
                status: error
                message: "Missing or invalid authentication token"
        "500":
          description: Internal Server Error
          content:
            application/json:
              example:
                status: error
                message: "An unexpected error occurred on the server"


#  /api/auth/token:
#    post:
#      summary: Generate Authentication Token
#      description: |
#        This endpoint generates an authentication token that can be used in subsequent API requests requiring authentication.
#      operationId: generateToken
#      tags:
#        - Authentication
#      parameters:
#        - in: header
#          name: Content-Type
#          required: true
#          schema:
#            type: string
#            example: "application/json"
#          description: The content type of the request, must be `application/json`.
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              type: object
#              required:
#                - username
#                - password
#              properties:
#                username:
#                  type: string
#                  description: The username of the user.
#                  example: "user@example.com"
#                password:
#                  type: string
#                  format: password
#                  description: The password of the user.
#                  example: "securepassword"
#                grant_type:
#                  type: string
#                  description: The type of authentication request. Default is `password`.
#                  example: "password"
#      responses:
#        "200":
#          description: Successful authentication response
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  token:
#                    type: string
#                    description: The generated authentication token.
#                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
#                  expires_in:
#                    type: integer
#                    description: Token expiration time in seconds.
#                    example: 3600
#                  token_type:
#                    type: string
#                    description: Type of token, typically `Bearer`.
#                    example: "Bearer"
#        "400":
#          description: Bad request due to missing parameters
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  error:
#                    type: string
#                    example: "Username and password are required."
#        "401":
#          description: Unauthorized request due to invalid credentials
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  error:
#                    type: string
#                    example: "Invalid username or password."
#        "500":
#          description: Internal Server Error
#          content:
#            application/json:
#              example:
#                status: error
#                message: "An unexpected error occurred on the server"
#      security: []



components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
